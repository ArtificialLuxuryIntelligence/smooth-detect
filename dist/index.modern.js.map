{"version":3,"file":"index.modern.js","sources":["../src/helpers/helpers.js","../src/classes/Interpolator.js","../src/helpers/geometry.js","../src/classes/InterpolatedDetector.js","../src/classes/Detectors/__VectorDetector.js","../src/classes/Detectors/VDBlaze.js","../src/constants.js","../src/classes/Detectors/VDMesh.js","../src/classes/Detectors/VDIrisMesh.js","../src/classes/Detectors/VDHandpose.js","../src/helpers/mapDeep.js","../src/defaultsMULTI.js","../src/nosePoseMULTI.js"],"sourcesContent":["/**\n * Simple object check.\n * @param item\n * @returns {boolean}\n */\nfunction isObject(item) {\n  return item && typeof item === 'object' && !Array.isArray(item);\n}\n\n/**\n * Deep merge two objects.\n * @param target\n * @param ...sources\n */\nfunction mergeDeep(target, ...sources) {\n  if (!sources.length) return target;\n  const source = sources.shift();\n\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (isObject(source[key])) {\n        if (!target[key]) Object.assign(target, { [key]: {} });\n        mergeDeep(target[key], source[key]);\n      } else {\n        Object.assign(target, { [key]: source[key] });\n      }\n    }\n  }\n\n  return mergeDeep(target, ...sources);\n}\n\nexport { mergeDeep };\n","// takes a slow promise and allows it to be run quickly with values interpolated (using any function) when slow promise  has yet to return\n\n\n// slowPromise :FUNCTION returns a promise that takes some time to resolve\n// stepToward : FUNCTION called on previous calculated value and resolved value of promise\n// fps : frames per second for slowPromise to be called (leave as false if max fps for promise is desired)\n\n\nexport default class Interpolator {\n  constructor(slowPromise, stepToward, stepArg, fps = false) {\n    this.slowPromise = slowPromise;\n    this.stepToward = stepToward;\n    this.fast = null; //updated every iteration call (note: here it is the whole prediction object -  see defaults)\n    this.slow = null; //updated only when promise resolves\n    this.resolved = true;\n    this.fps = fps;\n    this.stepArg = stepArg; // 3rd argument supplied to stepToward (after prev value and target value (aka this.fast & this.slow) - i.e. stepDistance\n  }\n\n  interpolate(val) {\n    this.__updateFast();\n    this.__updateSlow(val);\n    return this.fast;\n  }\n  __updateFast() {\n    if (!this.fast) {\n      this.fast = this.slow;\n    } else {\n      this.fast = this.stepToward(this.fast, this.slow, this.stepArg); // current val, target val, 'sensitiviy' (some const)\n    }\n  }\n  async __updateSlow(val) {\n    if (!this.resolved) {\n      return;\n    }\n    if (this.resolved) {\n      this.resolved = false;\n      let v;\n\n      if (this.fps) {\n        const [p1, p2] = [this.slowPromise(val), this.__timeoutPromise()];\n        let p = await Promise.all([p1, p2]);\n        v = p[0];\n        this.resolved = true;\n        v && (this.slow = v);\n      } else {\n        v = await this.slowPromise(val);\n        this.resolved = true;\n        v && (this.slow = v);\n      }\n    }\n  }\n\n  // helper to enforce fps minimum\n  async __timeoutPromise() {\n    // console.log('calling TO');\n    return new Promise((resolve, reject) => {\n      setTimeout(resolve, 1000 / this.fps);\n    }).then(() => {\n      // console.log('resolved TO');\n      return null;\n    });\n  }\n}\n","// not quite the same as normal tween functions? - we don't track the intial value.. \n\n//   // step size range [0,1] (percent of total dist)\nfunction stepToward(prevPos, actualPos, stepSize = 0.1) {\n  let x, y;\n  let [x1, y1] = [...prevPos];\n  let [x2, y2] = [...actualPos];\n\n  let d_x = x2 - x1;\n  let d_y = y2 - y1;\n\n  x = x1 + d_x * stepSize;\n  y = y1 + d_y * stepSize;\n  return [x, y];\n}\n\n\n// rename stepToward1D and above stepToward2D\nfunction stepTowardLinear(prevVal, actualVal, stepSize = 0.1) {\n  let d_x = actualVal - prevVal;\n\n  return prevVal + d_x * stepSize;\n}\n\nfunction averageCoordinate(array) {\n  let l = array.length;\n  let c = array\n    .reduce(\n      (acc, curr) => {\n        let [x, y, z] = acc;\n        let [xc, yc, zc] = curr;\n        return [x + xc, y + yc, z + zc];\n      },\n      [0, 0, 0]\n    )\n    .map((v) => v / l);\n  return c;\n}\n\nfunction distanceCoordinates(c1, c2) {\n  if (c1.length === 2) {\n    return Math.sqrt((c2[0] - c1[0]) ** 2 + (c2[1] - c1[1]) ** 2);\n  } else if (c1.length === 3) {\n    return Math.sqrt(\n      (c2[0] - c1[0]) ** 2 + (c2[1] - c1[1]) ** 2 + (c2[2] - c1[2]) ** 2\n    );\n  } else {\n    throw new Error('please enter 2d or 3d vectors');\n  }\n}\n\n// This maths is absolutely terrible\nfunction angleCoordinatesXY(c1, c2) {\n  let [x1, y1] = c1;\n  let [x2, y2] = c2;\n  let d_x = x2 - x1;\n  let d_y = y2 - y1;\n  let angle = Math.atan(d_y / d_x);\n  let a;\n  a = angle < 0 ? angle + Math.PI : angle;\n  return Math.PI - a;\n}\n\nexport {\n  stepToward,\n  stepTowardLinear,\n  averageCoordinate,\n  distanceCoordinates,\n  angleCoordinatesXY,\n};\n","import { mergeDeep } from './../helpers/helpers';\nimport Interpolator from './Interpolator';\nimport { defaults } from '../defaults';\n\n//\n\n// params\n// detector: a detector with load, detect and configure function\n// configs: e.g. :\n\nexport default class InterpolatedDetectorMULTI {\n  constructor(detectors) {\n    // {noser: {detector: NVDDetector(class), config:{}}, mesh: {detector: NVDDetector(class), config:{}}, etc }\n    this.detectors = detectors;\n    this.loaded = false;\n    this.animationFrameId = null;\n  }\n\n  async load() {\n    let promises = [];\n    Object.values(this.detectors).forEach((d) => {\n      // Load the models\n      promises.push(d.detector.load());\n      // await d.detector.load();\n\n      // Add the interpolators\n      d.interpolator = new Interpolator(\n        (video) => d.detector.detect(video), //slow fn to interpolate between return vals\n        d.config.interpolator.stepToward, //interpolation fn\n        d.config.interpolator.sensitivity,\n        d.config.interpolator.fps\n      );\n    });\n    let p = await Promise.all(promises);\n    console.log('all loaded');\n    this.loaded = true;\n  }\n\n  configure(configs) {\n    let detNames = Object.keys(configs);\n    detNames.forEach((d) => {\n      // get detector\n      let dd = this.detectors[d];\n      // configure the detector if config\n      if (configs[d].detector) {\n        this.__configureDetector(configs[d].detector, dd);\n      }\n      // configure the interpolator if config\n      if (configs[d].interpolator) {\n        this.__configureInterpolator(configs[d].interpolator, dd);\n      }\n    });\n  }\n\n  // probably bad naming -  actually calls the interpolators (which in turn call the detect fn of detectors as their 'slow' promise)\n  detect(video) {\n    if (!this.loaded) {\n      return {};\n    }\n    let detections = {};\n    Object.keys(this.detectors).forEach((n) => {\n      detections[n] = this.detectors[n].interpolator.interpolate(video);\n    });\n\n    // let configs = Object.values({ ...this.detectors }).map((v) => v.config);\n    let configs = {};\n    Object.keys(this.detectors).forEach((n) => {\n      configs[n] = this.detectors[n].config;\n    });\n\n    return { detections, configs };\n  }\n\n  // looping detection\n  startDetection(video, loopers = []) {\n    const looper = () => {\n      let d = this.detect(video);\n      //loop any functions hooking into the animation loop\n      if (loopers.length) {\n        loopers.forEach((fn) => fn(d));\n      }\n      this.animationFrameId = requestAnimationFrame(looper);\n    };\n    looper();\n  }\n\n  stopDetection() {\n    cancelAnimationFrame(this.animationFrameId);\n  }\n  __configureDetector(config, detector = {}) {\n    Object.assign(detector.config.detector, config);\n\n    detector.detector.configure(config);\n  }\n\n  // interpolator don't (yet?) have config option so need to instantiate new one\n  __configureInterpolator(config, detector = {}) {\n    Object.assign(detector.config.interpolator, config);\n\n    detector.interpolator = new Interpolator(\n      (video) => detector.detector.detect(video),\n      detector.config.interpolator.stepToward,\n      detector.config.interpolator.sensitivity,\n      detector.config.interpolator.fps\n    );\n  }\n}\n\n// mergeDeep of default configs should be in index.js, not here - > the input should already be a complete config object\n// config fn should compare existing configs and new ones. and only update if the key for that detector is in configure fn call object\nclass InterpolatedDetector {\n  constructor(configs, detector) {\n    this.detector = detector;\n    this.interpolator = null;\n    this.configs = mergeDeep({}, defaults, configs);\n    // note : current implementation in react always provides a complete configuration object (mergeDeep alrady done)\n    // reason: react needs to hold the config state so that sliders etc work\n    // so  merge isnt really needed here (currently\n  }\n\n  async load() {\n    // load and set up detector\n    await this.detector.load();\n    this.__configureDetector(this.configs.detector);\n\n    //config inits new interpolator (sets this.interpolator = ...)\n    this.__configureInterpolator(this.configs.interpolator);\n  }\n\n  configure(configuration) {\n    // only update configurations which have changed: (slightly smoother UI when configuring)\n    //*\n\n    /** TODO This function can be simplified\n     * only configure detector/interp if it exists in input\n     * (no need for deep conpare-?) - assumes any input is different...\n     */\n    let detectorConfigChange =\n      JSON.stringify(this.configs.detector) !==\n      JSON.stringify(configuration.detector);\n\n    let interpolatorConfigChange =\n      JSON.stringify(this.configs.interpolator) !==\n      JSON.stringify(configuration.interpolator);\n\n    //configure detector\n    detectorConfigChange && this.__configureDetector(configuration.detector);\n\n    // init new interpolator (with new configuration)\n    interpolatorConfigChange &&\n      this.__configureInterpolator(configuration.interpolator);\n\n    //update configs\n    this.configs = mergeDeep({}, this.configs, configuration);\n  }\n\n  __configureDetector(config) {\n    this.detector.configure(config);\n  }\n  __configureInterpolator(config) {\n    this.interpolator = new Interpolator(\n      (video) => this.detector.detect(video),\n      config.stepToward,\n      config.sensitivity,\n      config.fps\n    );\n  }\n\n  detect(video) {\n    return this.interpolator.interpolate(video);\n  }\n}\n","  import { FACE_SCALE } from '../../constants';\n\nexport default class VectorDetector {\n  constructor(config) {\n    this.model = null;\n    this.config = config; // optional - can be configured after init\n  }\n\n  // load, detect and __getPredictionData are in extensions of this class\n\n  configure(config) {\n    Object.assign(this.config, config);\n    //\n  }\n\n  // TODO: move this to face classes (or a shared class for all face classes? - which blaze/mesh inherit from)\n  __getNosePointVectors(nose, center, scale = 1) {\n    let central_bounding = this.config.central_bounding;\n    let outer_bounding = this.config.outer_bounding;\n\n    const x = center[0] - nose[0];\n    const y = center[1] - nose[1];\n    let coords = [x, y];\n\n    //normalize distance\n\n    // -----------------------------------------------------------\n\n    const direction_word = this.__getDirection(coords, central_bounding);\n    const vector = [x, y];\n\n    // TODO - should outerbounding be scaled separately?\n    const nose_normalized_square = this.__getVectorNormalized(\n      coords, //px\n      outer_bounding, //px\n      scale //px used to grow/shrink bounding limits based on z distance\n    );\n    const nose_normalized_circle = this.__normalizeRect2Circ(\n      nose_normalized_square\n    );\n\n    return {\n      direction_word,\n      vector, //absolute value in face bounding rect\n      nose_normalized_square, //normalized square [0,1]x [0,1]y\n      nose_normalized_circle, //normalized circle [0,1]r\n    };\n  }\n\n  __normalizeInRange(value, range1, range2 = [0, 1]) {\n    if (value > range1[1]) {\n      return range2[1];\n    }\n    if (value < range1[0]) {\n      return range2[0];\n    }\n    let dist1 = range1[1] - range1[0];\n    let dist2 = range2[1] - range2[0];\n\n    const ratio = (value - range1[0]) / dist1; //range [0,1]\n    let norm = range2[0] + ratio * dist2;\n    return norm;\n  }\n\n  //2d plane coordinates => unit circle r=1.\n  // note: not a map but simply limits coordinates outside of radius to on circle.\n  __normalizeRect2Circ(coords, radius = 1) {\n    let [x, y] = coords;\n    let x_sign = x > 0 ? 1 : -1;\n    let y_sign = y > 0 ? 1 : -1;\n\n    if (Math.sqrt(x ** 2 + y ** 2) <= radius) {\n      return [x, y];\n    }\n\n    const theta = Math.atan(y / x);\n    const y_b = y_sign * Math.abs(radius * Math.sin(theta));\n    const x_b = x_sign * Math.abs(radius * Math.cos(theta));\n    return [x_b, y_b];\n  }\n\n  // TODO rename/mvoe to blaze/mesh class\n  // returns \"up\", \"down\",\"left\",\"right\"\n  __getDirection(coords, central_bounding) {\n    const [x, y] = coords;\n\n    let direction;\n    // get bounding config\n    let bounding_x = central_bounding.x;\n    let bounding_y = central_bounding.y;\n    let [x_min, x_max] = bounding_x;\n    let [y_min, y_max] = bounding_y;\n\n    // estimate direction\n    if (x <= x_max && x >= x_min && y <= y_max && y >= y_min) {\n      direction = 'center';\n    } else if (x < x_max && x > x_min) {\n      if (y > y_max) {\n        direction = 'up';\n      } else if (y < y_min) {\n        direction = 'down';\n      }\n    } else if (y < y_max && y > y_min) {\n      if (x > x_max) {\n        direction = 'right';\n      } else if (x < x_min) {\n        direction = 'left';\n      }\n    }\n    return direction;\n  }\n\n  //TODO is this needed in this form? // maybe it is good for stuff with 2d bounding..?\n  // where are the scaling operations happening?\n  __getVectorNormalized(coords, outer_bounding, scale = 1) {\n    const [x, y] = coords;\n\n    // get bounding config\n    let bounding_x = outer_bounding.x.map((v) => v * scale); //z axis normalization;\n    let bounding_y = outer_bounding.y.map((v) => v * scale); //z axis normalization;\n    let [x_min, x_max] = bounding_x;\n    let [y_min, y_max] = bounding_y;\n\n    let x_normalized = this.__normalizeInRange(x, [x_min, x_max], [-1, 1]); // range normalization\n    let y_normalized = this.__normalizeInRange(y, [y_min, y_max], [-1, 1]);\n\n    return [x_normalized, y_normalized];\n  }\n}\n","import * as blazeface from '@tensorflow-models/blazeface';\n// import * as tf from '@tensorflow/tfjs';\nimport { FACE_SCALE } from '../../constants';\nimport { distanceCoordinates } from '../../helpers/geometry';\n\nimport './__VectorDetector';\nimport VectorDetector from './__VectorDetector';\n\nexport default class NVDBlaze extends VectorDetector {\n  constructor(config) {\n    super(config);\n    // super(config);\n    // this.model = model;\n  }\n\n  async load() {\n    this.model = await blazeface.load({ maxFaces: 1 });\n  }\n\n  async detect(video) {\n    // Get predictions from model\n    let predictions = await this.model.estimateFaces(video);\n    if (!predictions.length) {\n      return false;\n    }\n\n    // Extract relevant data\n    let data = this.__getPredictionData(predictions[0]);\n    const { scale } = data;\n    const { tip: nose } = data.nose;\n    const { center } = data.face;\n\n    let vectors = this.__getNosePointVectors(nose, center, scale);\n    let config = this.config;\n\n    // note estimateFaces complete *predictions* are also included here (DO NOT call it again!)\n    return { int_vectors: vectors, vectors, predictions: predictions[0] };\n  }\n\n  __getPredictionData(prediction) {\n    const eye_l = prediction.landmarks[0];\n    const eye_r = prediction.landmarks[1];\n    const nose = prediction.landmarks[2];\n    const eyeDist = distanceCoordinates(eye_l, eye_r);\n    const scale = eyeDist / FACE_SCALE;\n    const topLeft = prediction.topLeft;\n    const bottomRight = prediction.bottomRight;\n    const width = bottomRight[0] - topLeft[0];\n    const height = bottomRight[1] - topLeft[1];\n    const center = [topLeft[0] + width / 2, topLeft[1] + height / 2];\n\n    // return { topLeft, bottomRight, width, height, center, nose };\n\n    return {\n      scale,\n      face: { topLeft, bottomRight, width, height, center },\n\n      nose: {\n        tip: nose,\n      },\n    };\n  }\n}\n","const FACE_SCALE = 85;\nconst HAND_SCALE = 1; // currently unused?\nexport { FACE_SCALE, HAND_SCALE };\n","\n\nimport * as faceLandmarksDetection from '@tensorflow-models/face-landmarks-detection';\n\n\nimport { distanceCoordinates } from '../../helpers/geometry';\nimport { FACE_SCALE } from '../../constants';\n\nimport './__VectorDetector';\nimport VectorDetector from './__VectorDetector';\n\nexport default class NVDMesh extends VectorDetector {\n  constructor(config) {\n    super(config);\n    // super(config);\n    // this.model = model;\n  }\n\n  async load() {\n    this.model = await faceLandmarksDetection.load(\n      faceLandmarksDetection.SupportedPackages.mediapipeFacemesh,\n      { maxFaces: 1, shouldLoadIrisModel: false }\n    );\n  }\n\n  async detect(video) {\n    // Get predictions from model\n    let predictions = await this.model.estimateFaces({\n      input: video,\n      predictIrises: false,\n    });\n\n    if (!predictions.length) {\n      return false;\n    }\n\n    // Extract relevant data\n    let data = this.__getPredictionData(predictions[0]);\n    const { scale } = data;\n    const { center } = data.face;\n    const {\n      rightEyeLower1,\n      rightEyeUpper1,\n      leftEyeLower1,\n      leftEyeUpper1,\n    } = data.eyes;\n    const { lipsLowerInner, lipsUpperInner } = data.mouth;\n    const { tip } = data.nose;\n\n    // Calculate vectors\n    let noseVectors = this.__getNosePointVectors(tip, center, scale);\n    let mouthVector = this.__getMouthOpenVector(\n      lipsLowerInner,\n      lipsUpperInner,\n      scale\n    );\n    let eyeVectors = this.__getEyesClosedVectors(\n      rightEyeLower1,\n      rightEyeUpper1,\n      leftEyeLower1,\n      leftEyeUpper1,\n      scale\n    );\n\n    let vectors = {\n      ...noseVectors,\n      ...mouthVector,\n      ...eyeVectors,\n    };\n    // let config = this.config;\n\n    // Return info\n\n    // return int_vectors = vectors for first loop\n    return { int_vectors: vectors, vectors, data, predictions: predictions[0] }; // not 'raw' data (predictions also included) data is kinda a shit dupe of this? (but useful for us here/.)\n  }\n\n  // Extract useful data from raw data\n  __getPredictionData(prediction) {\n    //face\n    const { topLeft, bottomRight } = prediction.boundingBox;\n    const width = bottomRight[0] - topLeft[0];\n    const height = bottomRight[1] - topLeft[1];\n    const center = [topLeft[0] + width / 2, topLeft[1] + height / 2];\n\n    let {\n      lipsLowerInner,\n      lipsUpperInner,\n      rightEyeLower1,\n      rightEyeUpper1,\n      leftEyeLower1,\n      leftEyeUpper1,\n    } = prediction.annotations;\n\n    lipsLowerInner = lipsLowerInner[5];\n    lipsUpperInner = lipsUpperInner[5];\n    rightEyeLower1 = rightEyeLower1[4];\n    rightEyeUpper1 = rightEyeUpper1[4];\n    leftEyeLower1 = leftEyeLower1[4];\n    leftEyeUpper1 = leftEyeUpper1[4];\n\n    const eyeDist = distanceCoordinates(rightEyeLower1, leftEyeLower1);\n    const noseTip = prediction.scaledMesh[4];\n    const scale = eyeDist / FACE_SCALE;\n    return {\n      scale,\n      face: { topLeft, bottomRight, width, height, center },\n      eyes: {\n        rightEyeLower1,\n        rightEyeUpper1,\n        leftEyeLower1,\n        leftEyeUpper1,\n        eyeDist,\n      },\n      nose: {\n        tip: noseTip,\n      },\n      mouth: { lipsLowerInner, lipsUpperInner },\n    };\n    // return {\n    //   topLeft,\n    //   bottomRight,\n    //   width,\n    //   height,\n    //   center,\n    //   nose,\n    //   lipsLowerInner,\n    //   lipsUpperInner,\n    //   rightEyeLower1,\n    //   rightEyeUpper1,\n    //   leftEyeLower1,\n    //   leftEyeUpper1,\n    //   eyeDist,\n    //   scale,\n    // };\n  }\n\n  __getMouthOpenVector(lipUpper, lipLower, scale) {\n    let distance = distanceCoordinates(lipUpper, lipLower) / scale; // z normalized\n    let mouth_bounding = this.config.mouth_bounding;\n    const normalized_mouth = this.__normalizeInRange(distance, mouth_bounding);\n\n    return { normalized_mouth };\n  }\n  //output is a bit shit but that the model not the fn\n  __getEyesClosedVectors(\n    rightEyeLower1,\n    rightEyeUpper1,\n    leftEyeLower1,\n    leftEyeUpper1,\n    scale\n  ) {\n    let distance_r =\n      distanceCoordinates(rightEyeLower1, rightEyeUpper1) / scale; //distance normalized for z-dist\n    let eye_bounding = this.config.eye_bounding;\n    const normalized_eye_r = this.__normalizeInRange(distance_r, eye_bounding);\n    let distance_l = distanceCoordinates(leftEyeLower1, leftEyeUpper1) / scale; //distance normalized for z-dist\n\n    const normalized_eye_l = this.__normalizeInRange(distance_l, eye_bounding);\n\n    return { normalized_eye_r, normalized_eye_l };\n  }\n}\n","import * as faceLandmarksDetection from '@tensorflow-models/face-landmarks-detection';\n\nimport './__VectorDetector';\nimport VectorDetector from './__VectorDetector';\n\n// TODO extends Mesh\n\nexport default class IVDMesh extends VectorDetector {\n  constructor(config) {\n    super( config);\n  }\n\n  async load() {\n    this.model = await faceLandmarksDetection.load(\n      faceLandmarksDetection.SupportedPackages.mediapipeFacemesh,\n      { maxFaces: 1, shouldLoadIrisModel: true }\n    );\n  }\n\n  async detect(video) {\n    // Get predictions from model\n    let predictions = await this.model.estimateFaces({\n      input: video,\n      predictIrises: true,\n    });\n    if (!predictions.length) {\n      return false;\n    }\n\n    // Extract relevant data\n    const { nose, center } = this.__getPredictionData(predictions[0]);\n\n    let vectors = this.__getNosePointVectors(nose, center);\n    let config = this.config;\n\n    // note estimateFaces complete *predictions* are also included here (DO NOT call it again!)\n    return { vectors, predictions: predictions[0] };\n  }\n\n  __getPredictionData(prediction) {\n    let annots = prediction.annotations;\n\n    let {\n      leftEyeIris,\n      leftEyeLower0,\n      leftEyeLower1,\n      leftEyeLower2,\n      leftEyeLower3,\n      leftEyeUpper0,\n      leftEyeUpper1,\n      leftEyeUpper2,\n    } = annots;\n\n    let pts = [\n      ...leftEyeLower0,\n      // ...leftEyeLower1,\n      // ...leftEyeLower2,\n      // ...leftEyeLower3,\n      ...leftEyeUpper0,\n      // ...leftEyeUpper1,\n      // ...leftEyeUpper2,\n    ];\n    //find average (central point)\n    let l = pts.length;\n    let c = pts\n      .reduce(\n        (acc, curr, i, a) => {\n          let [x, y] = acc;\n          let [xc, yc] = curr;\n          return [x + xc, y + yc];\n        },\n        [0, 0]\n      )\n      .map((v) => v / l);\n\n    // const topLeft = prediction.topLeft;\n    // const bottomRight = prediction.bottomRight;\n    // const width = bottomRight[0] - topLeft[0];\n    // const height = bottomRight[1] - topLeft[1];\n    // const center = [topLeft[0] + width / 2, topLeft[1] + height / 2];\n\n    // const nose = prediction.landmarks[2];\n\n    const nose = leftEyeIris[0]; //not nose..\n    const center = c;\n\n    return { center, nose };\n  }\n}\n","import * as handpose from '@tensorflow-models/handpose';\nimport {\n  distanceCoordinates,\n  angleCoordinatesXY,\n  averageCoordinate,\n} from '../../helpers/geometry';\nimport { HAND_SCALE } from '../../constants';\n\nimport './__VectorDetector';\nimport VectorDetector from './__VectorDetector';\n\nexport default class VDHandpose extends VectorDetector {\n  constructor(config) {\n    super(config);\n    // super(config);\n    // this.model = model;\n  }\n\n  async load() {\n    this.model = await handpose.load();\n  }\n\n  async detect(video) {\n    // Get predictions from model\n    const predictions = await this.model.estimateHands(\n      document.querySelector('video')\n    );\n\n    if (!predictions.length) {\n      return false;\n    }\n\n    // Extract relevant data\n    let data = this.__getPredictionData(predictions[0]);\n\n    // const { center ,width, height} = data;\n    let { indexFinger, middleFinger, palmBase, pink, ringFinger, thumb } = data;\n    let finger1Tip = indexFinger[3];\n    let thumbTip = thumb[3];\n\n    // Calculate vectors\n\n    let pinchPos1 = this.__getPinchPos(thumbTip, finger1Tip, 1);\n\n    let pinch1 = this.__getPinchVector(\n      thumbTip,\n      finger1Tip,\n      this.config.pinch1_bounding,\n      1\n    );\n    //assuming right hand for direction of rotation though no so important\n    let rotation1 = this.__getRotation(\n      thumbTip,\n      finger1Tip,\n      this.config.rotation1_bounding,\n      1\n    );\n\n    let vectors = { pinch1, rotation1, pinchPos1 };\n    // let config = this.config;\n\n    // Return info\n\n    // return int_vectors = vectors for first loop\n    return { int_vectors: vectors, vectors, data, predictions: predictions[0] }; // not 'raw' data (predictions also included) data is kinda a shit dupe of this? (but useful for us here/.)\n  }\n\n  // Extract useful data from raw data\n  __getPredictionData(prediction) {\n    //face\n    const { topLeft, bottomRight } = prediction.boundingBox;\n    const width = bottomRight[0] - topLeft[0];\n    const height = bottomRight[1] - topLeft[1];\n    const center = [topLeft[0] + width / 2, topLeft[1] + height / 2];\n\n    // const scale = eyeDist / FACE_SCALE;\n    return { topLeft, width, height, center, ...prediction.annotations };\n  }\n  // should be a more general fn\n\n  // normalized [0,1]\n  __getPinchPos(thumbTip, finger1Tip, pinchBounding, scale) {\n    const dims = [640, 480];\n\n    let p = averageCoordinate([thumbTip, finger1Tip]);\n    let norm = [p[0] / dims[0], p[1] / dims[1]];\n    return norm;\n  }\n\n  __getPinchVector(thumbTip, finger1Tip, pinchBounding, scale) {\n    let distance = distanceCoordinates(thumbTip, finger1Tip) / scale; // z normalized\n    const normalizedPinch = this.__normalizeInRange(distance, pinchBounding);\n    return normalizedPinch;\n  }\n\n  __getRotation(thumbTip, finger1Tip, rotationBounding, scale) {\n    let angle;\n    let distance = distanceCoordinates(thumbTip, finger1Tip) / scale; // z normalized\n    if (distance < rotationBounding[0] || distance > rotationBounding[1]) {\n      return null;\n    }\n    angle = angleCoordinatesXY(thumbTip, finger1Tip);\n\n    return angle;\n  }\n\n  //output is a bit shit but that the model not the fn\n}\n","// TESTER FILE - FN AT BOTTOM\n\nconsole.clear();\n\nlet o1 = {\n  val: [0, 1],\n  val2: [0.4, 0.2],\n  val3: [\n    [0.4, 0.2],\n    [0.4, 0.2],\n    [0.4, 0.2],\n  ],\n  val4: 3,\n  val5: 'string',\n  val6: {\n    val: [1, 0, 2],\n  },\n};\n\nlet o2 = {\n  val: [0, 0.8],\n  val2: [0.1, 0.1],\n  val3: [\n    [0.4, 0.3],\n    [0.5, 0.2],\n    [0.4, 0.2],\n  ],\n  val4: 4,\n  val5: 'straang',\n\n  val6: {\n    val: [1, 0, 1],\n  },\n};\n\nfunction isObject(item) {\n  return item && typeof item === 'object' && !Array.isArray(item);\n}\nfunction mapDeep(mapper, target, source) {\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (isObject(source[key])) {\n        if (!target[key]) Object.assign(target, { [key]: {} });\n        mapDeep(target[key], source[key]);\n      } else {\n        Object.assign(target, { [key]: mapper(target[key], source[key], key) });\n      }\n    }\n  }\n\n  return target;\n}\n\n// slightly confusing way around o1, o2 but I might be dumb\nlet o3 = mapDeep(mapper, o1, o2);\nconsole.log(o3);\n\n// this is what user will enter in config\n//optional key arg for picking out specific keys if wanted (otherwise just use array length)\nfunction mapper(val1, val2, key) {\n  // console.log(key);\n  if (Array.isArray(val1)) {\n    if (val1.length === 2) {\n      return stepToward2D(val1, val2, 0.1);\n    }\n    // if /...\n    // handle long array of arrays,\n    // 3d array\n    else return val2; // or 1?\n  }\n  if (typeof val1 === 'number') {\n    return stepToward1D(val1, val2, 0.1);\n  }\n  return val2; // if none of the above are satisfied\n}\n\nfunction stepToward2D(prevPos, actualPos, stepSize = 0.1) {\n  let x, y;\n  let [x1, y1] = [...prevPos];\n  let [x2, y2] = [...actualPos];\n\n  let d_x = x2 - x1;\n  let d_y = y2 - y1;\n\n  x = x1 + d_x * stepSize;\n  y = y1 + d_y * stepSize;\n  return [x, y];\n}\n\nfunction stepToward1D(prevVal, actualVal, stepSize = 0.1) {\n  let d_x = actualVal - prevVal;\n\n  return prevVal + d_x * stepSize;\n}\n\nexport default mapDeep;\n","// Presets for FaceDetector class\n\nimport { stepToward, stepTowardLinear } from './helpers/geometry';\nimport mapDeep from './helpers/mapDeep';\n\n// measured in pixels where eyes are FACE_SCALE (constant) distance apart\n// scaled for z distance in calculations\n// TO DO: set as [0,1] - width/height of full capture\nconst defaultsMULTI = {\n  blaze: {\n    detector: {\n      central_bounding: { x: [-20, 20], y: [-20, 15] },\n      outer_bounding: { x: [-50, 50], y: [-35, 15] },\n    },\n    interpolator: {\n      fps: 0, // zero is max\n      sensitivity: 0.07,\n      stepToward: stepTowardDetector, // change to stepMapper (not stepToward ) and import the mergedeep magic into interpolator class?\n      mapper: null,\n    },\n  },\n  mesh: {\n    detector: {\n      central_bounding: { x: [-20, 20], y: [-20, 15] },\n      outer_bounding: { x: [-50, 50], y: [-35, 15] },\n      mouth_bounding: [0, 25],\n      eye_bounding: [20, 32],\n    },\n    interpolator: {\n      fps: 0, // zero is gives a max fps\n      sensitivity: 0.07,\n      stepToward: stepTowardDetector,\n      mapper: null,\n    },\n  },\n  iris: {\n    detector: {\n      central_bounding: { x: [-20, 20], y: [-20, 15] },\n      outer_bounding: { x: [-50, 50], y: [-35, 15] },\n      mouth_bounding: [0, 10],\n      eye_bounding: [25, 32],\n    },\n    interpolator: {\n      fps: 0, // zero is max\n      sensitivity: 0.07,\n      stepToward: stepTowardDetector,\n      mapper: null,\n    },\n  },\n  handpose: {\n    detector: {\n      central_bounding: { x: [-20, 20], y: [-20, 15] },\n      outer_bounding: { x: [-50, 50], y: [-35, 15] },\n      pinch1_bounding: [50, 150],\n      rotation1_bounding: [100, 200], //rotation not registered outside of this dist betw fingers\n\n      pinch2_bounding: [50, 150],\n      pinch3_bounding: [50, 150],\n      pinch4_bounding: [50, 150],\n    },\n    interpolator: {\n      fps: 0, // zero is max\n      sensitivity: 0.25,\n      stepToward: handposeStepTowardDetector,\n      mapper: null,\n    },\n  },\n};\n\n// only change circle/square vectors\n\n// TODO: a method that has [\"vector-normalized-cicle\",\"vector-normalized-square\"] as argument instead of this object madness\n// SEE MAPDEEP\nfunction stepTowardDetector(prevPredictions, currentPredictions, sensitivity) {\n  // TODO handle first loop where int_vectors (for example might not exist)\n  // hand that here??? or just continue to use original vector object as below/returned by detect fn in indiv detectors\n  // (where is it cleanest? probably not here)\n  const { vectors } = currentPredictions;\n  const {\n    nose_normalized_circle,\n    nose_normalized_square,\n    normalized_mouth,\n  } = vectors;\n\n  // handel no int_vectors here (i.e. create object)\n\n  return {\n    ...currentPredictions,\n    // ...vectors,\n    // mapdeep here on int_vectors, int_predictions...\n    int_vectors: {\n      nose_normalized_circle: stepToward(\n        prevPredictions.int_vectors?.nose_normalized_circle ||\n          prevPredictions.vectors.nose_normalized_circle, //first iteration this object does not exist\n        nose_normalized_circle,\n        sensitivity // can just set value here - doesnt have to be same sensitivity val everywhere\n      ),\n      nose_normalized_square: stepToward(\n        prevPredictions.int_vectors?.nose_normalized_square ||\n          prevPredictions.vectors.nose_normalized_square,\n        nose_normalized_square,\n        sensitivity\n      ),\n      normalized_mouth: stepTowardLinear(\n        prevPredictions.int_vectors?.normalized_mouth ||\n          prevPredictions.vectors.normalized_mouth,\n\n        normalized_mouth,\n        sensitivity\n      ),\n    },\n  };\n}\n\nfunction handposeStepTowardDetector(\n  prevPredictions,\n  currentPredictions,\n  sensitivity\n) {\n  const { vectors } = currentPredictions;\n  const { pinch1, rotation1, pinchPos1 } = vectors;\n\n  return {\n    ...currentPredictions,\n    // ...vectors,\n    int_vectors: {\n      pinch1: stepTowardLinear(\n        prevPredictions.int_vectors?.pinch1 || prevPredictions.vectors.pinch1,\n        pinch1,\n        sensitivity\n      ),\n      pinchPos1: stepToward(\n        prevPredictions.int_vectors?.pinchPos1 ||\n          prevPredictions.vectors.pinchPos1,\n        pinchPos1,\n        sensitivity\n      ),\n      rotation1: stepTowardLinear(\n        prevPredictions.int_vectors?.rotation1 ||\n          prevPredictions.vectors.rotation1,\n        rotation1,\n        sensitivity\n      ),\n    },\n  };\n}\n\nexport { defaultsMULTI };\n","import * as tf from '@tensorflow/tfjs-core';\nimport '@tensorflow/tfjs-backend-webgl';\n// import * as tfjsWasm from '@tensorflow/tfjs-backend-wasm';\nimport '@tensorflow/tfjs-backend-cpu';\n// not using tf.setBackend ..\n\nimport InterpolatedDetector from './classes/InterpolatedDetector';\nimport VectorDetector from './classes/Detectors/__VectorDetector';\nimport NVDBlaze from './classes/Detectors/VDBlaze';\nimport NVDMesh from './classes/Detectors/VDMesh';\nimport IVDMesh from './classes/Detectors/VDIrisMesh';\nimport VDHandpose from './classes/Detectors/VDHandpose';\n// import { op } from '@tensorflow/tfjs';\n// import { defaults } from './defaults';\nimport { defaultsMULTI } from './defaultsMULTI';\nimport { mergeDeep } from './helpers/helpers';\n\n// MULTI - args: [{name: \"blaze\", config:{asdf}, \"mesh\"] ; args array contains either object (with configs) OR string (default configs)\n// config here! i.e.- new IVDMesh(configs)  - merge with defaults so that vectorDetector always has full config\n\nexport default function nosePoseMULTI(options = []) {\n  let detectors = {};\n  // {blaze: {detector: NVDDetector(class), config:{detector:{}, interpolator:{}}}, mesh: {detector: NVDDetector(class), config:{}}, etc }\n\n  options.forEach((option) => {\n    let d;\n    if (typeof option === 'string') {\n      d = getDetector(option, null);\n      let name = option;\n      detectors[name] = d;\n    } else {\n      let name = option.name;\n      d = getDetector(name, option.config);\n      detectors[name] = d;\n    }\n  });\n\n  let smoothDetector = new InterpolatedDetector(detectors);\n  return smoothDetector;\n}\n\n/**\n *\n * @param {name\n * } type string\n */\nfunction getDetector(name, config) {\n  let detector;\n  // add in configs that haven't been specified\n  let configMerged = mergeDeep({}, defaultsMULTI[name], config);\n\n  switch (name) {\n    case 'iris':\n      detector = new IVDMesh(configMerged.detector);\n      break;\n    case 'mesh':\n      detector = new NVDMesh(configMerged.detector);\n      break;\n    case 'blaze':\n      detector = new NVDBlaze(configMerged.detector);\n      break;\n    case 'handpose':\n      detector = new VDHandpose(configMerged.detector);\n      break;\n    default:\n      //none\n      // detector = new NVDBlaze(configMerged.detector);\n\n      break;\n  }\n  // add configs that are not supplied\n\n  // return detector object\n  return { detector, config: configMerged };\n}\n"],"names":["isObject","item","Array","isArray","mergeDeep","target","sources","length","source","shift","key","Object","assign","[object Object]","Interpolator","constructor","slowPromise","stepToward","stepArg","fps","this","fast","slow","resolved","interpolate","val","__updateFast","__updateSlow","v","p1","p2","__timeoutPromise","Promise","all","resolve","reject","setTimeout","then","prevPos","actualPos","stepSize","x","y","x1","y1","x2","y2","stepTowardLinear","prevVal","actualVal","distanceCoordinates","c1","c2","Math","sqrt","Error","InterpolatedDetectorMULTI","detectors","loaded","animationFrameId","promises","values","forEach","d","push","detector","load","interpolator","video","detect","config","sensitivity","console","log","configure","configs","keys","dd","__configureDetector","__configureInterpolator","detections","n","startDetection","loopers","looper","fn","requestAnimationFrame","stopDetection","cancelAnimationFrame","VectorDetector","model","__getNosePointVectors","nose","center","scale","outer_bounding","coords","direction_word","__getDirection","central_bounding","vector","nose_normalized_square","__getVectorNormalized","nose_normalized_circle","__normalizeRect2Circ","__normalizeInRange","value","range1","range2","radius","x_sign","y_sign","theta","atan","y_b","abs","sin","cos","direction","bounding_x","bounding_y","x_min","x_max","y_min","y_max","map","NVDBlaze","super","blazeface","maxFaces","predictions","estimateFaces","data","__getPredictionData","tip","face","vectors","int_vectors","prediction","landmarks","eyeDist","topLeft","bottomRight","width","height","NVDMesh","faceLandmarksDetection","mediapipeFacemesh","shouldLoadIrisModel","input","predictIrises","rightEyeLower1","rightEyeUpper1","leftEyeLower1","leftEyeUpper1","eyes","lipsLowerInner","lipsUpperInner","mouth","__getMouthOpenVector","__getEyesClosedVectors","boundingBox","annotations","scaledMesh","lipUpper","lipLower","distance","normalized_mouth","mouth_bounding","distance_r","eye_bounding","normalized_eye_r","distance_l","normalized_eye_l","IVDMesh","annots","leftEyeIris","leftEyeLower0","leftEyeUpper0","pts","l","reduce","acc","curr","i","a","xc","yc","VDHandpose","handpose","estimateHands","document","querySelector","indexFinger","thumb","finger1Tip","thumbTip","pinchPos1","__getPinchPos","pinch1","__getPinchVector","pinch1_bounding","rotation1","__getRotation","rotation1_bounding","pinchBounding","dims","p","array","z","zc","averageCoordinate","rotationBounding","angle","PI","angleCoordinatesXY","clear","o3","mapDeep","mapper","val1","val2","stepToward2D","stepToward1D","val3","val4","val5","val6","defaultsMULTI","blaze","stepTowardDetector","mesh","iris","pinch2_bounding","pinch3_bounding","pinch4_bounding","prevPredictions","currentPredictions","nosePoseMULTI","options","option","getDetector","name","InterpolatedDetector","configMerged"],"mappings":"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"}