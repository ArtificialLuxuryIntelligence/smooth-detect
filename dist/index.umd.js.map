{"version":3,"file":"index.umd.js","sources":["../src/helpers/helpers.js","../src/classes/Interpolator.js","../src/helpers/geometry.js","../src/classes/InterpolatedDetector.js","../src/classes/Detectors/__VectorDetector.js","../src/classes/Detectors/VDBlaze.js","../src/constants.js","../src/classes/Detectors/VDMesh.js","../src/classes/Detectors/VDIrisMesh.js","../src/classes/Detectors/VDHandpose.js","../src/helpers/mapDeep.js","../src/helpers/tfStepTowardFactory.js","../src/defaultsMULTI.js","../src/nosePoseMULTI.js"],"sourcesContent":["/**\n * Simple object check.\n * @param item\n * @returns {boolean}\n */\nfunction isObject(item) {\n  return item && typeof item === 'object' && !Array.isArray(item);\n}\n\n/**\n * Deep merge two objects.\n * @param target\n * @param ...sources\n */\nfunction mergeDeep(target, ...sources) {\n  if (!sources.length) return target;\n  const source = sources.shift();\n\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (isObject(source[key])) {\n        if (!target[key]) Object.assign(target, { [key]: {} });\n        mergeDeep(target[key], source[key]);\n      } else {\n        Object.assign(target, { [key]: source[key] });\n      }\n    }\n  }\n\n  return mergeDeep(target, ...sources);\n}\n\nexport { mergeDeep };\n","// takes a slow promise and allows it to be run quickly with values interpolated (using any function) when slow promise  has yet to return\n\n// slowPromise :FUNCTION returns a promise that takes some time to resolve\n// stepToward : FUNCTION called on previous calculated value and resolved value of promise\n// fps : frames per second for slowPromise to be called (leave as false if max fps for promise is desired)\n\nexport default class Interpolator {\n  constructor(slowPromise, stepToward, fps = false) {\n    this.slowPromise = slowPromise;\n    this.stepToward = stepToward;\n    this.fast = null; //updated every iteration call (note: here it is the whole prediction object -  see defaults)\n    this.slow = null; //updated only when promise resolves\n    this.resolved = true;\n    this.fps = fps;\n  }\n\n  interpolate(val) {\n    this.__updateSlow(val);\n    this.__updateFast();\n    return this.fast;\n  }\n  __updateFast() {\n    if (!this.fast) {\n      this.fast = this.slow;\n    } else {\n      this.fast = this.stepToward(this.fast, this.slow); // current val, target val, 'sensitiviy' (some const)\n    }\n  }\n  async __updateSlow(val) {\n    if (!this.resolved) {\n      return;\n    }\n    if (this.resolved) {\n      this.resolved = false;\n      let v;\n\n      if (this.fps) {\n        /**\n         note: if the slowPromise resolves much more quickly than the timeout(fps) then\n         there there is a delay and what is returned can be 'stale'\n         i.e. here the detection will be from too many frames ago and be delayed\n         */\n        //\n        const [p1, p2] = [this.slowPromise(val), this.__timeoutPromise()];\n        let p = await Promise.all([p1, p2]);\n        v = p[0];\n        this.resolved = true;\n        v && (this.slow = v);\n      } else {\n        v = await this.slowPromise(val);\n        this.resolved = true;\n        v && (this.slow = v);\n      }\n    }\n  }\n\n  // helper to enforce fps minimum\n  async __timeoutPromise() {\n    // console.log('calling TO');\n    return new Promise((resolve, reject) => {\n      setTimeout(resolve, 1000 / this.fps);\n    }).then(() => {\n      // console.log('resolved TO');\n      return null;\n    });\n  }\n}\n","// not quite the same as normal tween functions? - we don't track the intial value..\n\n//   // step size range [0,1] (percent of total dist)\nfunction stepToward(prevPos, actualPos, stepSize = 0.1) {\n  let x, y;\n  let [x1, y1] = [...prevPos];\n  let [x2, y2] = [...actualPos];\n\n  let d_x = x2 - x1;\n  let d_y = y2 - y1;\n\n  x = x1 + d_x * stepSize;\n  y = y1 + d_y * stepSize;\n  return [x, y];\n}\n\n// rename stepToward1D and above stepToward2D\nfunction stepTowardLinear(prevVal, actualVal, stepSize = 0.1) {\n  let d_x = actualVal - prevVal;\n\n  return prevVal + d_x * stepSize;\n}\n\nfunction averageCoordinate(array) {\n  let l = array.length;\n  let c = array\n    .reduce(\n      (acc, curr) => {\n        let [x, y, z] = acc;\n        let [xc, yc, zc] = curr;\n        return [x + xc, y + yc, z + zc];\n      },\n      [0, 0, 0]\n    )\n    .map((v) => v / l);\n  return c;\n}\n\nfunction distanceCoordinates(c1, c2) {\n  if (c1.length === 2) {\n    return Math.sqrt((c2[0] - c1[0]) ** 2 + (c2[1] - c1[1]) ** 2);\n  } else if (c1.length === 3) {\n    return Math.sqrt(\n      (c2[0] - c1[0]) ** 2 + (c2[1] - c1[1]) ** 2 + (c2[2] - c1[2]) ** 2\n    );\n  } else {\n    throw new Error('please enter 2d or 3d vectors');\n  }\n}\n\n// This maths is absolutely terrible\nfunction angleCoordinatesXY(c1, c2) {\n  let [x1, y1] = c1;\n  let [x2, y2] = c2;\n  let d_x = x2 - x1;\n  let d_y = y2 - y1;\n  let angle = Math.atan(d_y / d_x);\n  let a;\n  a = angle < 0 ? angle + Math.PI : angle;\n  return Math.PI - a;\n}\n\nfunction stepToward2D(prevPos, actualPos, stepSize = 0.1) {\n  let x, y;\n  let [x1, y1] = [...prevPos];\n  let [x2, y2] = [...actualPos];\n\n  let d_x = x2 - x1;\n  let d_y = y2 - y1;\n\n  x = x1 + d_x * stepSize;\n  y = y1 + d_y * stepSize;\n  return [x, y];\n}\n\nfunction stepToward1D(prevVal, actualVal, stepSize = 0.1) {\n  let d_x = actualVal - prevVal;\n\n  return prevVal + d_x * stepSize;\n}\n\nexport {\n  stepToward1D,\n  stepToward2D,\n  stepToward,\n  stepTowardLinear,\n  averageCoordinate,\n  distanceCoordinates,\n  angleCoordinatesXY,\n};\n","import { mergeDeep } from './../helpers/helpers';\nimport Interpolator from './Interpolator';\nimport { defaults } from '../defaults';\nimport { stepToward } from '../helpers/geometry';\n\n//\n\n// params\n// detector: a detector with load, detect and configure function\n// configs: e.g. :\n\nexport default class InterpolatedDetectorMULTI {\n  constructor(detectors) {\n    // {noser: {detector: NVDDetector(class), config:{}}, mesh: {detector: NVDDetector(class), config:{}}, etc }\n    this.detectors = detectors;\n    this.loaded = false;\n    this.animationFrameId = null;\n  }\n\n  async load() {\n    let promises = [];\n    Object.values(this.detectors).forEach((d) => {\n      // Load the models\n      promises.push(d.detector.load());\n      // await d.detector.load();\n\n      // Add the interpolators\n\n      const { stepperFactory, mapperArgs, fps } = d.config.interpolator;\n      const interpolatorFunction = stepperFactory(mapperArgs);\n\n      d.interpolator = new Interpolator(\n        (video) => d.detector.detect(video), //slow fn to interpolate between return vals\n        interpolatorFunction, //interpolation fn\n        fps\n      );\n    });\n    let p = await Promise.all(promises);\n    console.log('all loaded');\n    this.loaded = true;\n  }\n\n  configure(configs) {\n    let detNames = Object.keys(configs);\n    detNames.forEach((d) => {\n      // get detector\n      let dd = this.detectors[d];\n      // configure the detector if config\n      if (configs[d].detector) {\n        this.__configureDetector(configs[d].detector, dd);\n      }\n      // configure the interpolator if config\n      if (configs[d].interpolator) {\n        this.__configureInterpolator(configs[d].interpolator, dd);\n      }\n    });\n  }\n\n  // probably bad naming -  actually calls the interpolators (which in turn call the detect fn of detectors as their 'slow' promise)\n  detect(video) {\n    if (!this.loaded) {\n      return {};\n    }\n    let detections = {};\n    Object.keys(this.detectors).forEach((n) => {\n      detections[n] = this.detectors[n].interpolator.interpolate(video);\n    });\n\n    // let configs = Object.values({ ...this.detectors }).map((v) => v.config);\n    let configs = {};\n    Object.keys(this.detectors).forEach((n) => {\n      configs[n] = this.detectors[n].config;\n    });\n\n    return { detections, configs };\n  }\n\n  // looping detection\n  startDetection(video, loopers = []) {\n    const looper = () => {\n      let d = this.detect(video);\n      //loop any functions hooking into the animation loop\n      if (loopers.length) {\n        loopers.forEach((fn) => fn(d));\n      }\n      this.animationFrameId = requestAnimationFrame(looper);\n    };\n    looper();\n  }\n\n  stopDetection() {\n    cancelAnimationFrame(this.animationFrameId);\n  }\n  __configureDetector(config, detector = {}) {\n    Object.assign(detector.config.detector, config);\n    detector.detector.configure(config);\n  }\n\n  // interpolator doesn't (yet?) have config option so need to instantiate new one\n  __configureInterpolator(config, detector = {}) {\n    mergeDeep(detector.config.interpolator, config);\n\n    const { stepperFactory, mapperArgs, fps } = detector.config.interpolator;\n    const interpolatorFunction = stepperFactory(mapperArgs);\n\n    detector.interpolator = new Interpolator(\n      (video) => detector.detector.detect(video), //slow fn to interpolate between return vals\n      interpolatorFunction, //interpolation fn\n      fps\n    );\n  }\n}\n\n","import { FACE_SCALE } from '../../constants';\n\nexport default class VectorDetector {\n  constructor(config) {\n    this.model = null;\n    this.config = config; // optional - can be configured after init\n  }\n\n  // load, detect and __getPredictionData are in extensions of this class\n\n  configure(config) {\n    Object.assign(this.config, config);\n    //\n  }\n\n  // TODO: move this to face classes (or a shared class for all face classes? - which blaze/mesh inherit from)\n  __getNosePointVectors(nose, center, scale = 1) {\n    // let central_bounding = this.config.central_bounding;\n    let outer_bounding = this.config.outer_bounding;\n\n    const x = center[0] - nose[0];\n    const y = center[1] - nose[1];\n    let coords = [x, y];\n\n    //normalize distance\n\n    // -----------------------------------------------------------\n\n    // const direction_word = this.__getDirection(coords, central_bounding);\n    const vector = [x, y];\n\n    // TODO - should outerbounding be scaled separately?\n    const nose_normalized_square = this.__getVectorNormalized(\n      coords, //px\n      outer_bounding, //px\n      scale //px used to grow/shrink bounding limits based on z distance\n    );\n    const nose_normalized_circle = this.__normalizeRect2Circ(\n      nose_normalized_square\n    );\n\n    return {\n      // direction_word,\n      vector, //absolute value in face bounding rect\n      nose_normalized_square, //normalized square [0,1]x [0,1]y\n      nose_normalized_circle, //normalized circle [0,1]r\n    };\n  }\n\n  __normalizeInRange(value, range1, range2 = [0, 1]) {\n    if (value > range1[1]) {\n      return range2[1];\n    }\n    if (value < range1[0]) {\n      return range2[0];\n    }\n    let dist1 = range1[1] - range1[0];\n    let dist2 = range2[1] - range2[0];\n\n    const ratio = (value - range1[0]) / dist1; //range [0,1]\n    let norm = range2[0] + ratio * dist2;\n    return norm;\n  }\n\n  //2d plane coordinates => unit circle r=1.\n  // note: not a map but simply limits coordinates outside of radius to on circle.\n  __normalizeRect2Circ(coords, radius = 1) {\n    let [x, y] = coords;\n    let x_sign = x > 0 ? 1 : -1;\n    let y_sign = y > 0 ? 1 : -1;\n\n    if (Math.sqrt(x ** 2 + y ** 2) <= radius) {\n      return [x, y];\n    }\n\n    const theta = Math.atan(y / x);\n    const y_b = y_sign * Math.abs(radius * Math.sin(theta));\n    const x_b = x_sign * Math.abs(radius * Math.cos(theta));\n    return [x_b, y_b];\n  }\n\n  //TODO is this needed in this form? // maybe it is good for stuff with 2d bounding..?\n  // where are the scaling operations happening?\n  __getVectorNormalized(coords, outer_bounding, scale = 1) {\n    const [x, y] = coords;\n\n    // get bounding config\n    let bounding_x = outer_bounding.x.map((v) => v * scale); //z axis normalization;\n    let bounding_y = outer_bounding.y.map((v) => v * scale); //z axis normalization;\n    let [x_min, x_max] = bounding_x;\n    let [y_min, y_max] = bounding_y;\n\n    let x_normalized = this.__normalizeInRange(x, [x_min, x_max], [-1, 1]); // range normalization\n    let y_normalized = this.__normalizeInRange(y, [y_min, y_max], [-1, 1]);\n\n    return [x_normalized, y_normalized];\n  }\n\n  // LEGACY\n  // returns \"up\", \"down\",\"left\",\"right\"\n  __getDirection(coords, central_bounding) {\n    const [x, y] = coords;\n\n    let direction;\n    // get bounding config\n    let bounding_x = central_bounding.x;\n    let bounding_y = central_bounding.y;\n    let [x_min, x_max] = bounding_x;\n    let [y_min, y_max] = bounding_y;\n\n    // estimate direction\n    if (x <= x_max && x >= x_min && y <= y_max && y >= y_min) {\n      direction = 'center';\n    } else if (x < x_max && x > x_min) {\n      if (y > y_max) {\n        direction = 'up';\n      } else if (y < y_min) {\n        direction = 'down';\n      }\n    } else if (y < y_max && y > y_min) {\n      if (x > x_max) {\n        direction = 'right';\n      } else if (x < x_min) {\n        direction = 'left';\n      }\n    }\n    return direction;\n  }\n}\n","import * as blazeface from '@tensorflow-models/blazeface';\n// import * as tf from '@tensorflow/tfjs';\nimport { FACE_SCALE } from '../../constants';\nimport { distanceCoordinates } from '../../helpers/geometry';\n\nimport './__VectorDetector';\nimport VectorDetector from './__VectorDetector';\n\nexport default class NVDBlaze extends VectorDetector {\n  constructor(config) {\n    super(config);\n    // super(config);\n    // this.model = model;\n  }\n\n  async load() {\n    this.model = await blazeface.load({ maxFaces: 1 });\n  }\n\n  async detect(video) {\n    // Get predictions from model\n    let predictions = await this.model.estimateFaces(video);\n    if (!predictions.length) {\n      return false;\n    }\n\n    // Extract relevant data\n    let data = this.__getPredictionData(predictions[0]);\n    const { scale } = data;\n    const { tip: nose } = data.nose;\n    const { center } = data.face;\n\n    let vectors = this.__getNosePointVectors(nose, center, scale);\n    let config = this.config;\n\n    // note estimateFaces complete *predictions* are also included here (DO NOT call it again!)\n    return { vectors, predictions: predictions[0] };\n  }\n\n  __getPredictionData(prediction) {\n    const eye_l = prediction.landmarks[0];\n    const eye_r = prediction.landmarks[1];\n    const nose = prediction.landmarks[2];\n    const eyeDist = distanceCoordinates(eye_l, eye_r);\n    const scale = eyeDist / FACE_SCALE;\n    const topLeft = prediction.topLeft;\n    const bottomRight = prediction.bottomRight;\n    const width = bottomRight[0] - topLeft[0];\n    const height = bottomRight[1] - topLeft[1];\n    const center = [topLeft[0] + width / 2, topLeft[1] + height / 2];\n\n    // return { topLeft, bottomRight, width, height, center, nose };\n\n    return {\n      scale,\n      face: { topLeft, bottomRight, width, height, center },\n\n      nose: {\n        tip: nose,\n      },\n    };\n  }\n}\n","const FACE_SCALE = 85;\nconst HAND_SCALE = 1; // currently unused?\nexport { FACE_SCALE, HAND_SCALE };\n","\n\nimport * as faceLandmarksDetection from '@tensorflow-models/face-landmarks-detection';\n\n\nimport { distanceCoordinates } from '../../helpers/geometry';\nimport { FACE_SCALE } from '../../constants';\n\nimport './__VectorDetector';\nimport VectorDetector from './__VectorDetector';\n\nexport default class NVDMesh extends VectorDetector {\n  constructor(config) {\n    super(config);\n    // super(config);\n    // this.model = model;\n  }\n\n  async load() {\n    this.model = await faceLandmarksDetection.load(\n      faceLandmarksDetection.SupportedPackages.mediapipeFacemesh,\n      { maxFaces: 1, shouldLoadIrisModel: false }\n    );\n  }\n\n  async detect(video) {\n    // Get predictions from model\n    let predictions = await this.model.estimateFaces({\n      input: video,\n      predictIrises: false,\n    });\n\n    if (!predictions.length) {\n      return false;\n    }\n\n    // Extract relevant data\n    let data = this.__getPredictionData(predictions[0]);\n    const { scale } = data;\n    const { center } = data.face;\n    const {\n      rightEyeLower1,\n      rightEyeUpper1,\n      leftEyeLower1,\n      leftEyeUpper1,\n    } = data.eyes;\n    const { lipsLowerInner, lipsUpperInner } = data.mouth;\n    const { tip } = data.nose;\n\n    // Calculate vectors\n    let noseVectors = this.__getNosePointVectors(tip, center, scale);\n    let mouthVector = this.__getMouthOpenVector(\n      lipsLowerInner,\n      lipsUpperInner,\n      scale\n    );\n    let eyeVectors = this.__getEyesClosedVectors(\n      rightEyeLower1,\n      rightEyeUpper1,\n      leftEyeLower1,\n      leftEyeUpper1,\n      scale\n    );\n\n    let vectors = {\n      ...noseVectors,\n      ...mouthVector,\n      ...eyeVectors,\n    };\n    // let config = this.config;\n\n    // Return info\n\n    // return int_vectors = vectors for first loop\n    return { int_vectors: vectors, vectors, data, predictions: predictions[0] }; // not 'raw' data (predictions also included) data is kinda a shit dupe of this? (but useful for us here/.)\n  }\n\n  // Extract useful data from raw data\n  __getPredictionData(prediction) {\n    //face\n    const { topLeft, bottomRight } = prediction.boundingBox;\n    const width = bottomRight[0] - topLeft[0];\n    const height = bottomRight[1] - topLeft[1];\n    const center = [topLeft[0] + width / 2, topLeft[1] + height / 2];\n\n    let {\n      lipsLowerInner,\n      lipsUpperInner,\n      rightEyeLower1,\n      rightEyeUpper1,\n      leftEyeLower1,\n      leftEyeUpper1,\n    } = prediction.annotations;\n\n    lipsLowerInner = lipsLowerInner[5];\n    lipsUpperInner = lipsUpperInner[5];\n    rightEyeLower1 = rightEyeLower1[4];\n    rightEyeUpper1 = rightEyeUpper1[4];\n    leftEyeLower1 = leftEyeLower1[4];\n    leftEyeUpper1 = leftEyeUpper1[4];\n\n    const eyeDist = distanceCoordinates(rightEyeLower1, leftEyeLower1);\n    const noseTip = prediction.scaledMesh[4];\n    const scale = eyeDist / FACE_SCALE;\n    return {\n      scale,\n      face: { topLeft, bottomRight, width, height, center },\n      eyes: {\n        rightEyeLower1,\n        rightEyeUpper1,\n        leftEyeLower1,\n        leftEyeUpper1,\n        eyeDist,\n      },\n      nose: {\n        tip: noseTip,\n      },\n      mouth: { lipsLowerInner, lipsUpperInner },\n    };\n    // return {\n    //   topLeft,\n    //   bottomRight,\n    //   width,\n    //   height,\n    //   center,\n    //   nose,\n    //   lipsLowerInner,\n    //   lipsUpperInner,\n    //   rightEyeLower1,\n    //   rightEyeUpper1,\n    //   leftEyeLower1,\n    //   leftEyeUpper1,\n    //   eyeDist,\n    //   scale,\n    // };\n  }\n\n  __getMouthOpenVector(lipUpper, lipLower, scale) {\n    let distance = distanceCoordinates(lipUpper, lipLower) / scale; // z normalized\n    let mouth_bounding = this.config.mouth_bounding;\n    const normalized_mouth = this.__normalizeInRange(distance, mouth_bounding);\n\n    return { normalized_mouth };\n  }\n  //output is a bit shit but that the model not the fn\n  __getEyesClosedVectors(\n    rightEyeLower1,\n    rightEyeUpper1,\n    leftEyeLower1,\n    leftEyeUpper1,\n    scale\n  ) {\n    let distance_r =\n      distanceCoordinates(rightEyeLower1, rightEyeUpper1) / scale; //distance normalized for z-dist\n    let eye_bounding = this.config.eye_bounding;\n    const normalized_eye_r = this.__normalizeInRange(distance_r, eye_bounding);\n    let distance_l = distanceCoordinates(leftEyeLower1, leftEyeUpper1) / scale; //distance normalized for z-dist\n\n    const normalized_eye_l = this.__normalizeInRange(distance_l, eye_bounding);\n\n    return { normalized_eye_r, normalized_eye_l };\n  }\n}\n","import * as faceLandmarksDetection from '@tensorflow-models/face-landmarks-detection';\n\nimport './__VectorDetector';\nimport VectorDetector from './__VectorDetector';\n\n// TODO extends Mesh\n\nexport default class IVDMesh extends VectorDetector {\n  constructor(config) {\n    super( config);\n  }\n\n  async load() {\n    this.model = await faceLandmarksDetection.load(\n      faceLandmarksDetection.SupportedPackages.mediapipeFacemesh,\n      { maxFaces: 1, shouldLoadIrisModel: true }\n    );\n  }\n\n  async detect(video) {\n    // Get predictions from model\n    let predictions = await this.model.estimateFaces({\n      input: video,\n      predictIrises: true,\n    });\n    if (!predictions.length) {\n      return false;\n    }\n\n    // Extract relevant data\n    const { nose, center } = this.__getPredictionData(predictions[0]);\n\n    let vectors = this.__getNosePointVectors(nose, center);\n    let config = this.config;\n\n    // note estimateFaces complete *predictions* are also included here (DO NOT call it again!)\n    return { vectors, predictions: predictions[0] };\n  }\n\n  __getPredictionData(prediction) {\n    let annots = prediction.annotations;\n\n    let {\n      leftEyeIris,\n      leftEyeLower0,\n      leftEyeLower1,\n      leftEyeLower2,\n      leftEyeLower3,\n      leftEyeUpper0,\n      leftEyeUpper1,\n      leftEyeUpper2,\n    } = annots;\n\n    let pts = [\n      ...leftEyeLower0,\n      // ...leftEyeLower1,\n      // ...leftEyeLower2,\n      // ...leftEyeLower3,\n      ...leftEyeUpper0,\n      // ...leftEyeUpper1,\n      // ...leftEyeUpper2,\n    ];\n    //find average (central point)\n    let l = pts.length;\n    let c = pts\n      .reduce(\n        (acc, curr, i, a) => {\n          let [x, y] = acc;\n          let [xc, yc] = curr;\n          return [x + xc, y + yc];\n        },\n        [0, 0]\n      )\n      .map((v) => v / l);\n\n    // const topLeft = prediction.topLeft;\n    // const bottomRight = prediction.bottomRight;\n    // const width = bottomRight[0] - topLeft[0];\n    // const height = bottomRight[1] - topLeft[1];\n    // const center = [topLeft[0] + width / 2, topLeft[1] + height / 2];\n\n    // const nose = prediction.landmarks[2];\n\n    const nose = leftEyeIris[0]; //not nose..\n    const center = c;\n\n    return { center, nose };\n  }\n}\n","import * as handpose from '@tensorflow-models/handpose';\nimport {\n  distanceCoordinates,\n  angleCoordinatesXY,\n  averageCoordinate,\n} from '../../helpers/geometry';\nimport { HAND_SCALE } from '../../constants';\n\nimport './__VectorDetector';\nimport VectorDetector from './__VectorDetector';\n\nexport default class VDHandpose extends VectorDetector {\n  constructor(config) {\n    super(config);\n    // super(config);\n    // this.model = model;\n  }\n\n  async load() {\n    this.model = await handpose.load();\n  }\n\n  async detect(video) {\n    // Get predictions from model\n    const predictions = await this.model.estimateHands(\n      document.querySelector('video')\n    );\n\n    if (!predictions.length) {\n      return false;\n    }\n\n    // Extract relevant data\n    let data = this.__getPredictionData(predictions[0]);\n\n    // const { center ,width, height} = data;\n    let { indexFinger, middleFinger, palmBase, pink, ringFinger, thumb } = data;\n    let finger1Tip = indexFinger[3];\n    let thumbTip = thumb[3];\n\n    // Calculate vectors\n\n    let pinchPos1 = this.__getPinchPos(thumbTip, finger1Tip, 1);\n\n    let pinch1 = this.__getPinchVector(\n      thumbTip,\n      finger1Tip,\n      this.config.pinch1_bounding,\n      1\n    );\n    //assuming right hand for direction of rotation though no so important\n    let rotation1 = this.__getRotation(\n      thumbTip,\n      finger1Tip,\n      this.config.rotation1_bounding,\n      1\n    );\n\n    let vectors = { pinch1, rotation1, pinchPos1 };\n    // let config = this.config;\n\n    // Return info\n\n    // return int_vectors = vectors for first loop\n    return { int_vectors: vectors, vectors, data, predictions: predictions[0] }; // not 'raw' data (predictions also included) data is kinda a shit dupe of this? (but useful for us here/.)\n  }\n\n  // Extract useful data from raw data\n  __getPredictionData(prediction) {\n    //face\n    const { topLeft, bottomRight } = prediction.boundingBox;\n    const width = bottomRight[0] - topLeft[0];\n    const height = bottomRight[1] - topLeft[1];\n    const center = [topLeft[0] + width / 2, topLeft[1] + height / 2];\n\n    // const scale = eyeDist / FACE_SCALE;\n    return { topLeft, width, height, center, ...prediction.annotations };\n  }\n  // should be a more general fn\n\n  // normalized [0,1]\n  __getPinchPos(thumbTip, finger1Tip, pinchBounding, scale) {\n    const dims = [640, 480];\n\n    let p = averageCoordinate([thumbTip, finger1Tip]);\n    let norm = [p[0] / dims[0], p[1] / dims[1]];\n    return norm;\n  }\n\n  __getPinchVector(thumbTip, finger1Tip, pinchBounding, scale) {\n    let distance = distanceCoordinates(thumbTip, finger1Tip) / scale; // z normalized\n    const normalizedPinch = this.__normalizeInRange(distance, pinchBounding);\n    return normalizedPinch;\n  }\n\n  __getRotation(thumbTip, finger1Tip, rotationBounding, scale) {\n    let angle;\n    let distance = distanceCoordinates(thumbTip, finger1Tip) / scale; // z normalized\n    if (distance < rotationBounding[0] || distance > rotationBounding[1]) {\n      return null;\n    }\n    angle = angleCoordinatesXY(thumbTip, finger1Tip);\n\n    return angle;\n  }\n\n  //output is a bit shit but that the model not the fn\n}\n","// TESTER FILE - FN AT BOTTOM\n\nconsole.clear();\n\nlet o1 = {\n  val: [0, 1],\n  val2: [0.4, 0.2],\n  val3: [\n    [0.4, 0.2],\n    [0.4, 0.2],\n    [0.4, 0.2],\n  ],\n  val4: 3,\n  val5: 'string',\n  val6: {\n    val: [1, 0, 2],\n  },\n};\n\nlet o2 = {\n  val: [0, 0.8],\n  val2: [0.1, 0.1],\n  val3: [\n    [0.4, 0.3],\n    [0.5, 0.2],\n    [0.4, 0.2],\n  ],\n  val4: 4,\n  val5: 'straang',\n\n  val6: {\n    val: [1, 0, 1],\n  },\n};\n\nfunction isObject(item) {\n  return item && typeof item === 'object' && !Array.isArray(item);\n}\nfunction mapDeep(mapper, mapperArgs, target, source) {\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (isObject(source[key])) {\n        if (!target[key]) Object.assign(target, { [key]: {} });\n        mapDeep(target[key], source[key]);\n      } else {\n        Object.assign(target, {\n          [key]: mapper(mapperArgs, key, target[key], source[key]),\n        });\n      }\n    }\n  }\n\n  return target;\n}\n\n// slightly confusing way around o1, o2 but I might be dumb\n// let o3 = mapDeep(mapper, o1, o2);\n// console.log(o3);\n\n// this is what user will enter in config\n//optional key arg for picking out specific keys if wanted (otherwise just use array length)\nfunction mapper(val1, val2, key) {\n  // console.log(key);\n  if (Array.isArray(val1)) {\n    if (val1.length === 2) {\n      return stepToward2D(val1, val2, 0.1);\n    }\n    // if /...\n    // handle long array of arrays,\n    // 3d array\n    else return val2; // or 1?\n  }\n  if (typeof val1 === 'number') {\n    return stepToward1D(val1, val2, 0.1);\n  }\n  return val2; // if none of the above are satisfied\n}\n\nfunction stepToward2D(prevPos, actualPos, stepSize = 0.1) {\n  let x, y;\n  let [x1, y1] = [...prevPos];\n  let [x2, y2] = [...actualPos];\n\n  let d_x = x2 - x1;\n  let d_y = y2 - y1;\n\n  x = x1 + d_x * stepSize;\n  y = y1 + d_y * stepSize;\n  return [x, y];\n}\n\nfunction stepToward1D(prevVal, actualVal, stepSize = 0.1) {\n  let d_x = actualVal - prevVal;\n\n  return prevVal + d_x * stepSize;\n}\n\nexport default mapDeep;\n","import { stepToward1D, stepToward2D } from './geometry';\nimport mapDeep from './mapDeep';\n\n// returns a stepToward function\n//optional  params for setting the individual function or step value for keys of prediction (i.e. landmarks, normalized_circle etc.)\nexport default function tfStepTowardFactory(mapperArgs) {\n  return (prevPredictions, currentPredictions) => {\n    let int_vectors;\n    let int_predictions;\n    if (prevPredictions.int_vectors) {\n      int_vectors = mapDeep(\n        stepMapper,\n        mapperArgs,\n        prevPredictions.int_vectors,\n        currentPredictions.vectors\n      );\n    } else {\n      // handle first loop where no int values exist\n      int_vectors = currentPredictions.vectors;\n    }\n    if (prevPredictions.int_predictions) {\n      int_predictions = mapDeep(\n        stepMapper,\n        mapperArgs,\n        prevPredictions.int_predictions,\n        currentPredictions.predictions\n      );\n    } else {\n      // console.log(\"first loop\")\n      int_predictions = currentPredictions.predictions;\n    }\n\n    return {\n      ...currentPredictions,\n      int_vectors,\n      int_predictions,\n    };\n  };\n}\n\nfunction stepMapper(mapperArgs, key, val1, val2) {\n  let step = 0.1;\n  let stepperFunction;\n  if (key in mapperArgs) {\n    let val = mapperArgs[key];\n    if (!val) {\n      //set to false (i.e dont interpolate)\n      return val2;\n    }\n    if (val.step) {\n      step = val.step;\n    }\n    if (val.stepperFunction) {\n      //todo: also accept a string and a lookup for a function here (i.e. different stepperfns to pick from)\n      stepperFunction = val.stepperFunction;\n      // setting to false stops interpolation [note: for performace it should be set to false by default...]\n    }\n  }\n  // console.log(key);\n  if (Array.isArray(val1)) {\n    if (Array.isArray(val1[0])) {\n      // array of arrays\n      return val1.map((v1, idx) => stepMapper(mapperArgs, key, v1, val2[idx]));\n    }\n    if (val1.length === 2) {\n      if (stepperFunction) {\n        return stepperFunction(val1, val2, step);\n      } else {\n        return stepToward2D(val1, val2, step);\n      }\n    }\n    if (val1.length === 3) {\n      if (stepperFunction) {\n        return stepperFunction(val1, val2, step);\n      } else {\n        return stepToward2D(val1, val2, step); // TO DO 3D VERSION or just make a generic stepToward fn for all dims..\n      }\n    }\n  }\n  if (typeof val1 === 'number') {\n    if (stepperFunction) {\n      return stepperFunction(val1, val2, step);\n    } else {\n      return stepToward1D(val1, val2, step);\n    }\n  }\n  return val2; // if none of the above are satisfied\n}\n","// Presets for FaceDetector class\n\nimport {\n  stepToward,\n  stepTowardLinear,\n  stepToward1D,\n  stepToward2D,\n} from './helpers/geometry';\nimport tfStepTowardFactory from './helpers/tfStepTowardFactory';\n\n// measured in pixels where eyes are FACE_SCALE (constant) distance apart\n// scaled for z distance in calculations\n// TO DO: set as [0,1] - width/height of full capture\nconst defaultsMULTI = {\n  blaze: {\n    detector: {\n      // central_bounding: { x: [-20, 20], y: [-20, 15] },\n      outer_bounding: { x: [-50, 50], y: [-35, 15] },\n    },\n    interpolator: {\n      predictions: true,\n      vectors: true,\n\n      fps: 1, // zero is max\n      sensitivity: 0.07,\n\n      mapperArgs: {\n        // landmarks: {\n        //   step: 0.1,\n        //   stepperFunction: stepToward2D,\n        // },\n        probability: false,\n      },\n      get stepperFactory() {\n        return tfStepTowardFactory;\n      },\n    },\n  },\n  mesh: {\n    detector: {\n      // central_bounding: { x: [-20, 20], y: [-20, 15] },\n      outer_bounding: { x: [-50, 50], y: [-35, 15] },\n      mouth_bounding: [0, 25],\n      eye_bounding: [20, 32],\n    },\n    interpolator: {\n      fps: 0, // zero is gives a max fps\n      sensitivity: 0.07,\n      mapperArgs: {\n        probability: false,\n      },\n\n      get stepperFactory() {\n        return tfStepTowardFactory;\n      },\n    },\n  },\n  handpose: {\n    detector: {\n      // central_bounding: { x: [-20, 20], y: [-20, 15] },\n      outer_bounding: { x: [-50, 50], y: [-35, 15] },\n      pinch1_bounding: [50, 150],\n      rotation1_bounding: [100, 200], //rotation not registered outside of this dist betw fingers\n\n      pinch2_bounding: [50, 150],\n      pinch3_bounding: [50, 150],\n      pinch4_bounding: [50, 150],\n    },\n    interpolator: {\n      fps: 0, // zero is max\n      sensitivity: 0.25,\n      mapperArgs: {\n        probability: false,\n      },\n      get stepperFactory() {\n        return tfStepTowardFactory;\n      },\n    },\n  },\n  // iris: {\n  //   detector: {\n  //     central_bounding: { x: [-20, 20], y: [-20, 15] },\n  //     outer_bounding: { x: [-50, 50], y: [-35, 15] },\n  //     mouth_bounding: [0, 10],\n  //     eye_bounding: [25, 32],\n  //   },\n  //   interpolator: {\n  //     fps: 0, // zero is max\n  //     sensitivity: 0.07,\n  //     stepToward: stepTowardDetector,\n  //   },\n  // },\n};\n\nexport { defaultsMULTI };\n\n// TODO: a method that has [\"vector-normalized-cicle\",\"vector-normalized-square\"] as argument instead of this object madness\n// SEE MAPDEEP\nfunction stepTowardDetector(prevPredictions, currentPredictions, sensitivity) {\n  // TODO handle first loop where int_vectors (for example might not exist)\n  // hand that here??? or just continue to use original vector object as below/returned by detect fn in indiv detectors\n  // (where is it cleanest? probably not here)\n  const { vectors } = currentPredictions;\n  const {\n    nose_normalized_circle,\n    nose_normalized_square,\n    normalized_mouth,\n  } = vectors;\n\n  // handel no int_vectors here (i.e. create object)\n\n  return {\n    ...currentPredictions,\n    // ...vectors,\n    // mapdeep here on int_vectors, int_predictions...\n    int_vectors: {\n      nose_normalized_circle: stepToward(\n        prevPredictions.int_vectors?.nose_normalized_circle ||\n          prevPredictions.vectors.nose_normalized_circle, //first iteration this object does not exist\n        nose_normalized_circle,\n        sensitivity // can just set value here - doesnt have to be same sensitivity val everywhere\n      ),\n      nose_normalized_square: stepToward(\n        prevPredictions.int_vectors?.nose_normalized_square ||\n          prevPredictions.vectors.nose_normalized_square,\n        nose_normalized_square,\n        sensitivity\n      ),\n      normalized_mouth: stepTowardLinear(\n        prevPredictions.int_vectors?.normalized_mouth ||\n          prevPredictions.vectors.normalized_mouth,\n\n        normalized_mouth,\n        sensitivity\n      ),\n    },\n  };\n}\n\nfunction handposeStepTowardDetector(\n  prevPredictions,\n  currentPredictions,\n  sensitivity\n) {\n  const { vectors } = currentPredictions;\n  const { pinch1, rotation1, pinchPos1 } = vectors;\n\n  return {\n    ...currentPredictions,\n    // ...vectors,\n    int_vectors: {\n      pinch1: stepTowardLinear(\n        prevPredictions.int_vectors?.pinch1 || prevPredictions.vectors.pinch1,\n        pinch1,\n        sensitivity\n      ),\n      pinchPos1: stepToward(\n        prevPredictions.int_vectors?.pinchPos1 ||\n          prevPredictions.vectors.pinchPos1,\n        pinchPos1,\n        sensitivity\n      ),\n      rotation1: stepTowardLinear(\n        prevPredictions.int_vectors?.rotation1 ||\n          prevPredictions.vectors.rotation1,\n        rotation1,\n        sensitivity\n      ),\n    },\n  };\n}\n","import * as tf from '@tensorflow/tfjs-core';\nimport '@tensorflow/tfjs-backend-webgl';\n// import * as tfjsWasm from '@tensorflow/tfjs-backend-wasm';\nimport '@tensorflow/tfjs-backend-cpu';\n// not using tf.setBackend ..\n\nimport InterpolatedDetector from './classes/InterpolatedDetector';\nimport VectorDetector from './classes/Detectors/__VectorDetector';\nimport NVDBlaze from './classes/Detectors/VDBlaze';\nimport NVDMesh from './classes/Detectors/VDMesh';\nimport IVDMesh from './classes/Detectors/VDIrisMesh';\nimport VDHandpose from './classes/Detectors/VDHandpose';\n// import { op } from '@tensorflow/tfjs';\n// import { defaults } from './defaults';\nimport { defaultsMULTI } from './defaultsMULTI';\nimport { mergeDeep } from './helpers/helpers';\n\n// MULTI - args: [{name: \"blaze\", config:{asdf}, \"mesh\"] ; args array contains either object (with configs) OR string (default configs)\n// config here! i.e.- new IVDMesh(configs)  - merge with defaults so that vectorDetector always has full config\n\nexport default function nosePoseMULTI(options = []) {\n  let detectors = {};\n  // {blaze: {detector: NVDDetector(class), config:{detector:{}, interpolator:{}}}, mesh: {detector: NVDDetector(class), config:{}}, etc }\n\n  options.forEach((option) => {\n    let d;\n    if (typeof option === 'string') {\n      d = getDetector(option, null);\n      let name = option;\n      detectors[name] = d;\n    } else {\n      let name = option.name;\n      d = getDetector(name, option.config);\n      detectors[name] = d;\n    }\n  });\n\n  let smoothDetector = new InterpolatedDetector(detectors);\n  return smoothDetector;\n}\n\n/**\n *\n * @param {name\n * } type string\n */\nfunction getDetector(name, config) {\n  let detector;\n  // add in configs that haven't been specified\n  let configMerged = mergeDeep({}, defaultsMULTI[name], config);\n\n  switch (name) {\n    case 'iris':\n      detector = new IVDMesh(configMerged.detector);\n      break;\n    case 'mesh':\n      detector = new NVDMesh(configMerged.detector);\n      break;\n    case 'blaze':\n      detector = new NVDBlaze(configMerged.detector);\n      break;\n    case 'handpose':\n      detector = new VDHandpose(configMerged.detector);\n      break;\n    default:\n      //none\n      // detector = new NVDBlaze(configMerged.detector);\n\n      break;\n  }\n  // add configs that are not supplied\n\n  // return detector object\n  return { detector, config: configMerged };\n}\n"],"names":["isObject","item","Array","isArray","mergeDeep","target","sources","length","source","shift","key","Object","assign","Interpolator","slowPromise","stepToward","fps","this","fast","slow","resolved","interpolate","val","__updateSlow","__updateFast","_this2","v","__timeoutPromise","Promise","all","p","resolve","reject","setTimeout","_this4","then","distanceCoordinates","c1","c2","Math","sqrt","Error","stepToward2D","prevPos","actualPos","stepSize","x1","y1","InterpolatedDetectorMULTI","detectors","loaded","animationFrameId","load","promises","values","forEach","d","push","detector","config","interpolator","interpolatorFunction","stepperFactory","mapperArgs","video","detect","console","log","configure","configs","keys","dd","_this3","__configureDetector","__configureInterpolator","detections","n","startDetection","loopers","looper","_this5","fn","requestAnimationFrame","stopDetection","cancelAnimationFrame","VectorDetector","model","__getNosePointVectors","nose","center","scale","x","y","vector","nose_normalized_square","__getVectorNormalized","outer_bounding","nose_normalized_circle","__normalizeRect2Circ","__normalizeInRange","value","range1","range2","coords","radius","x_sign","y_sign","theta","atan","y_b","abs","sin","cos","bounding_x","map","bounding_y","y_min","y_max","__getDirection","central_bounding","direction","x_min","x_max","NVDBlaze","blazeface","maxFaces","estimateFaces","predictions","data","__getPredictionData","vectors","tip","face","prediction","landmarks","eyeDist","topLeft","bottomRight","width","height","NVDMesh","faceLandmarksDetection","mediapipeFacemesh","shouldLoadIrisModel","input","predictIrises","eyes","rightEyeLower1","rightEyeUpper1","leftEyeLower1","leftEyeUpper1","mouth","lipsLowerInner","lipsUpperInner","__getMouthOpenVector","__getEyesClosedVectors","int_vectors","boundingBox","annotations","scaledMesh","lipUpper","lipLower","distance","normalized_mouth","mouth_bounding","distance_r","eye_bounding","normalized_eye_r","distance_l","normalized_eye_l","IVDMesh","annots","leftEyeIris","pts","leftEyeLower0","leftEyeUpper0","l","reduce","acc","curr","i","a","VDHandpose","handpose","estimateHands","document","querySelector","finger1Tip","indexFinger","thumbTip","thumb","pinchPos1","__getPinchPos","pinch1","__getPinchVector","pinch1_bounding","rotation1","__getRotation","rotation1_bounding","pinchBounding","array","dims","rotationBounding","angle","PI","mapDeep","mapper","tfStepTowardFactory","prevPredictions","currentPredictions","stepMapper","int_predictions","val1","val2","stepperFunction","prevVal","step","v1","idx","clear","defaultsMULTI","blaze","sensitivity","probability","mesh","pinch2_bounding","pinch3_bounding","pinch4_bounding","getDetector","name","configMerged","options","option","InterpolatedDetector"],"mappings":"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"}