{"version":3,"file":"VDBlaze-263eab03.js","sources":["../src/classes/Detectors/VDBlaze.js"],"sourcesContent":["import * as blazeface from '@tensorflow-models/blazeface';\nimport * as tf from '@tensorflow/tfjs';\nimport { FACE_SCALE } from '../../constants';\nimport { distanceCoordinates } from '../../helpers/geometry';\n\nimport './__VectorDetector';\nimport VectorDetector from './__VectorDetector';\n\nexport default class NVDBlaze extends VectorDetector {\n  constructor(config) {\n    super(config);\n    // super(config);\n    // this.model = model;\n  }\n\n  async load() {\n    this.model = await blazeface.load({ maxFaces: 1 });\n  }\n\n  async detect(video) {\n    // Get predictions from model\n    let predictions = await this.model.estimateFaces(video);\n    if (!predictions.length) {\n      return false;\n    }\n\n    // Extract relevant data\n    let data = this.__getPredictionData(predictions[0]);\n    const { scale } = data;\n    const { tip: nose } = data.nose;\n    const { center } = data.face;\n\n    let vectors = this.__getNosePointVectors(nose, center, scale);\n    let config = this.config;\n\n    // note estimateFaces complete *predictions* are also included here (DO NOT call it again!)\n    return { int_vectors: vectors, vectors, predictions: predictions[0] };\n  }\n\n  __getPredictionData(prediction) {\n    const eye_l = prediction.landmarks[0];\n    const eye_r = prediction.landmarks[1];\n    const nose = prediction.landmarks[2];\n    const eyeDist = distanceCoordinates(eye_l, eye_r);\n    const scale = eyeDist / FACE_SCALE;\n    const topLeft = prediction.topLeft;\n    const bottomRight = prediction.bottomRight;\n    const width = bottomRight[0] - topLeft[0];\n    const height = bottomRight[1] - topLeft[1];\n    const center = [topLeft[0] + width / 2, topLeft[1] + height / 2];\n\n    // return { topLeft, bottomRight, width, height, center, nose };\n\n    return {\n      scale,\n      face: { topLeft, bottomRight, width, height, center },\n\n      nose: {\n        tip: nose,\n      },\n    };\n  }\n}\n"],"names":["config","load","this","blazeface","maxFaces","_this2","model","detect","video","_this4","estimateFaces","predictions","length","data","__getPredictionData","vectors","__getNosePointVectors","nose","tip","face","center","scale","int_vectors","prediction","landmarks","eyeDist","distanceCoordinates","topLeft","bottomRight","width","height","FACE_SCALE","VectorDetector"],"mappings":"gTASE,WAAYA,sBACJA,0DAKFC,0BACJC,4BAAmBC,OAAe,CAAEC,SAAU,sBAA9CC,EAAKC,gDAGDC,gBAAOC,aAEaN,4BAAAO,EAAKH,MAAMI,cAAcF,kBAA7CG,GACJ,IAAKA,EAAYC,OACf,SAIF,IAAIC,EAAOJ,EAAKK,oBAAoBH,EAAY,IAK5CI,EAAUN,EAAKO,sBAHGH,EAAKI,KAAnBC,IACWL,EAAKM,KAAhBC,OAFUP,EAAVQ,OAQR,MAAO,CAAEC,YAAaP,EAASA,QAAAA,EAASJ,YAAaA,EAAY,4CAGnEG,oBAAA,SAAoBS,GAClB,IAEMN,EAAOM,EAAWC,UAAU,GAC5BC,EAAUC,sBAHFH,EAAWC,UAAU,GACrBD,EAAWC,UAAU,IAI7BG,EAAUJ,EAAWI,QACrBC,EAAcL,EAAWK,YACzBC,EAAQD,EAAY,GAAKD,EAAQ,GACjCG,EAASF,EAAY,GAAKD,EAAQ,GAKxC,MAAO,CACLN,MAVYI,EAAUM,aAWtBZ,KAAM,CAAEQ,QAAAA,EAASC,YAAAA,EAAaC,MAAAA,EAAOC,OAAAA,EAAQV,OANhC,CAACO,EAAQ,GAAKE,EAAQ,EAAGF,EAAQ,GAAKG,EAAS,IAQ5Db,KAAM,CACJC,IAAKD,QAlDyBe"}